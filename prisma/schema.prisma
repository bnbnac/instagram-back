// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

// relation : not saved in its table. prisma just manage it away from
model User {
  id Int @id @default(autoincrement())
  firstName String
  lastName String?
  username String @unique
  email String @unique
  password String
  bio String?
  avatar String?
  photos Photo[]
  followers User[] @relation("FollowRelation")
  following User[] @relation("FollowRelation")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms Room[]
  likes Like[]
  message Message[]
  comments Comment[]
}

model Photo {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  file String
  caption String?
  hashtags Hashtag[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  likes Like[]
  comments Comment[]
}

model Hashtag {
  id Int @id @default(autoincrement())
  hashtag String @unique
  photos Photo[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Like {
  id Int @id @default(autoincrement())
  photo Photo @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  photoId Int
  userId Int
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  // a user can like a photo only once
  // there is no doubleLike or su perLike
  @@unique([photoId, userId])
}

model Comment {
  id Int @id @default(autoincrement())
  photo Photo @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  payload String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  photoId Int
  userId Int
}

model Room {
  id Int @id @default(autoincrement())
  users User[]
  message Message[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Message {
  id Int @id @default(autoincrement())
  payload String
  user User @relation(fields: [userId], references: [id])
  userId Int
  room Room @relation(fields: [roomId], references: [id])
  roomId Int
  read Boolean @default(false)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  
//  @@unique([userId, roomId])
}